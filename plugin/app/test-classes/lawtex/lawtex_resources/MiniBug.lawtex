*struct[TesteMiniBugExists] {
	fields {
		+[x] : *TesteMiniBugInner,
		+[s] : String,
		if (EXISTS <elem> IN |x.a| : <elem> == [Root:x.b]) { // OKAY: 700
			&[funcionaAninhado] : Integer
		},
		if ([x.b] == [s]) { // OKAY: 701
			&[deepaliasfunciona] : Integer
		},
		if (EXISTS <elem> IN |Root:x.a| : <elem> == [Root:x.b]) { // OKAY: 702
			&[funcionaRoot] : Integer
		},
		if (EXISTS <elem> IN |Body:v| : <elem> == [Root:x.b]) { //OKAY 703
			&[funcionaFora] : Integer
		}
	}
}

*struct[TesteMiniBugInner] {
	fields {
		+|a| : Vector[String],
		+[b] : String,
		if (EXISTS <elem> IN |a| : <elem> == [b]) { // OKAY: 704
			&[funcionaDentro] : Integer
		},
		if (EXISTS <elem> IN |Root:x.a| : <elem> == [Root:x.b]) { // OKAY: 705
			&[funcionaDentroComplexo] : Integer
		}
	}
}

*struct[TesteMiniBugInner2] {
	fields {
		+|a| : Vector[String]
	}
}


/*
	--> Esperado
	TesteMiniBugExists.x.a : 700							--> BASE: Root (base do IfStruct, não do a)
	TEMP_TemplateMiniBug#BODY->e.x.b : 700 702 703		--> BASE: Root (base do IfStruct, não do canon root)
										 705				--> BASE: EcopCur (base 'x', não do canon root)
	TesteMiniBugExists.s : 701							--> BASE: EcopCur
	TesteMiniBugExists.x.b : 701							--> BASE: Root (base do IfStruct, não do b)
	TEMP_TemplateMiniBug#BODY->e.x.a : 702				--> BASE: Root (base do IfStruct, não do canon root)
										 705				--> BASE: EcopCur (base 'x', não do canon root)
	TEMP_TemplateMiniBug#BODY->v : 703					--> BASE: TEMP_TemplateMiniBug#BODY->e (base do IfStruct, não do canon alias)
	TEMP_TemplateMiniBug#BODY->v[*] : 703					--> BASE: TEMP_TemplateMiniBug#BODY->e (base do IfStruct, não do canon alias)
	TesteMiniBugInner.a : 704								--> BASE: EcopCur
	TesteMiniBugInner.b : 704								--> BASE: EcopCur
	TEMP_TemplateMiniBug#BODY->e.x.a[*] : 700				--> BASE: Root (base do IfStruct, não do a[*])
											702				--> BASE: Root (base do IfStruct, não do canon root)
											704				--> BASE: EcopCur
											705				--> BASE: EcopCur (base 'x', não do canon root[*])
 ----------------------------------------------->>>>>>>
	TEMP_TemplateMiniBug#BODY->v : 703  $$$
	TesteMiniBugInner.a : 704  $$$
	TesteMiniBugExists.x.b : 701  $$$
	TesteMiniBugInner.b : 704  $$$
	TEMP_TemplateMiniBug#BODY->v[0] : 703  $$$
	TesteMiniBugExists.s : 701  $$$
	TEMP_TemplateMiniBug#BODY->e.x.a : 702 705  $$$
	TesteMiniBugExists.x.a : 700  $$$
	TEMP_TemplateMiniBug#BODY->e.x.b : 705 700 702 703  $$$
	TEMP_TemplateMiniBug#BODY->e.x.a[0] : 704 700 702 705  $$$
 ......................................................
	TEMP_TemplateMiniBug#BODY->e.x.a[0]700: []
	TEMP_TemplateMiniBug#BODY->e.x.a[0]702: []
	TEMP_TemplateMiniBug#BODY->e.x.a700: []
	TEMP_TemplateMiniBug#BODY->e.x.b701: []
	TEMP_TemplateMiniBug#BODY->e.x.b700: []
	TEMP_TemplateMiniBug#BODY->e.x.a702: []
	TEMP_TemplateMiniBug#BODY->v703: [TEMP_TemplateMiniBug#BODY->e]
	TEMP_TemplateMiniBug#BODY->e.x.b703: []
	TEMP_TemplateMiniBug#BODY->e.x.b702: []
	TEMP_TemplateMiniBug#BODY->v[0]703: [TEMP_TemplateMiniBug#BODY->e]
 <<<<<< ===============================================
*/

*struct[TesteMiniBug] {
	fields {
		+[a] : List ("Pessoa natural", "Pessoa jurídica", "Ente não personificado") {
			atomic = true
			default = "Pessoa Jurídica"
		},
		if ([a] == "Pessoa jurídica") {
			+[b] : List ("Direito privado","Direito público") {
				atomic = true
				default = "Direito privado"
			},
			if ([b] == "Direito privado") {
				+[c] : List ("Sociedade","Empresa individual de responsabilidade limitada (EIRELI)", "Associação", "Fundação", "Pessoa jurídica de direito privado estrangeira", "Partido político", "Organização religiosa") {
					atomic = true
					default = "Sociedade"
				},
				if ([c] == "Sociedade") {
					+[d] : List ("Sociedade empresária limitada", "Sociedade por ações de capital fechado", "Sociedade por ações de capital aberto", "Sociedade estrangeira", "Sociedade de advogados",  "Sociedade simples limitada", "Sociedade simples pura","Sociedade cooperativa", "Sociedade em nome coletivo", "Sociedade em comandita simples", "Sociedade em comandita por ações") {
						atomic = true
						default = "Sociedade por ações de capital aberto"
					},
					if ([d] == "Sociedade de advogados") {
						+[e] : String
					}
				} elseif ([c] == "Pessoa jurídica de direito privado estrangeira") {
					+[d] : String
				},
				if ([c] == "Empresa individual de responsabilidade limitada (EIRELI)" OR [c] == "Sociedade" OR [c] == "Associação" OR [c] == "Fundação") {
					+[e] : String
				}
			} else {
				+[c] : List ("... de direito público externo", "... de direito público interno" ) {
					atomic = true
				},
				if ([c] == "... de direito público externo") {
					+[d] : List ("Estados", "Outros") {
						atomic = true
					}
				} else {
					+[d] : List ("Entes", "Órgãos") {
					 	atomic = true
					 }
				}
			}
		} else {
			+[e] : String,
			+[f] : List("Condomínio (edilício)", "Outro") {
				atomic = true
			},
			if ([f] == "Condomínio (edilício)") {
				+[g] : String
			} elseif ([f] == "Outro") {
				+[h] : String
			}
		}
	}
}

template[TEMP_TemplateMiniBug] {
	metainfo {
		language = "pt_BR"
	}
	head {
		title = "..."
 	}
 	body {
		declarations {
			+|v| : Vector[String],
			+<e> : *TesteMiniBugExists,
			+<obj> : *TesteMiniBug,
			+<index> : Integer,
			+<indexdynprop> : *TesteMiniBugInner2,
			+|testeDeProxyComIndex| : Vector[*TesteMiniBugInner2]
		}
		operations {
			print <e>,
			|v|.ask(),
			print <obj>,
			<index> = 0,
			|indexdynprop.a{0}|.mandatory = "-",
			|indexdynprop.a{<index>}|.mandatory = "-",
			|indexdynprop.a{<index>}| = "10",
			print <indexdynprop>,

			foreach(<elem> IN |testeDeProxyComIndex|) {
				print {
					version = <elem.a{<index>}>
				}
			},
			foreach(<elem> IN |testeDeProxyComIndex|) {
				foreach(<elem1> IN |elem.a|) {
					print <elem1>
				}
			}
		}
 	}
}