template[TEMP_BasicTests] {
   metainfo {
      language = "pt_BR"
      statement {
         audience = "O template se destina aos advogados e estagiários atuantes em direito societário."
         components = "O template usa, dentre os componentes globais, os sujeitos fundamentais Looplex."
         functionalities = "O template é dividido em três itens: a) Sócios, b) Sociedade e c) Encerramento. No item
relativo aos Sócios, o usuário insere todos os dados das pessoas físicas ou jurídicas que serão
sócias, bem como os dados de qualificação do administrador. No item da Sociedade, o usuário
insere o nome e a sede da sociedade, as atividades que constituem o objeto social da
sociedade, a forma e o prazo para integralização do capital social, os limites e condições para
que se realize gastos sem a autorização dos sócios. No item do Encerramento, o usuário insere
o local de assinatura, nome e informações do advogado que assina o contrato social."
         inputs = "Os principais dados necessários para produzir um documento baseado neste template são
identidade e dados dos sócios, composição, forma e o prazo de integralização do capital,
objeto social, identidade e dados do administrador e alçadas para as matérias sujeitas a
autorização dos sócios."
         overview = "Esse template tem como objetivo gerar contratos sociais de sociedades limitadas empresárias
seguindo o padrão Mundie, permitindo variações quanto aos sócios, nome, objeto social etc."
         warnings {
            "Impedimento quanto a cônjuges sob determinados regimes de bens de serem sócios;",
            "Caso haja mais de dez sócios, as cláusulas que se referem à realização de reuniões para a deliberação dos sócios são alteradas automaticamente para assembleia;",
            "Os representantes e procuradores dos sócios devem residir no Brasil;",
            "O endereço da sociedade a ser constituída necessariamente deverá ser no Brasil."
         }
      }
   }
   head {
      title = "AAABBB"
   }
   body {
      declarations {
         +<doc> : Document[StructAliasBasicTests1] {
            request = 1
            order = 1
         },
         +|vectdoc| : Vector[Document[StructAliasBasicTests1]] {
            request = 1
            order = 1
         },
         +<a> : *StructAliasBasicTests1 {
            order = 1
         },
         +<b> : *StructAliasBasicTests2,
         +<c> : Boolean,
         +<d> : Boolean,
         +|v| : Vector[Boolean] {
            request = "aaa"
            element = "xxx"
         }
      }
      operations {
         if (<a.atom> == "A" AND <b.a.atom> == "B" AND <a.atom> == "A1" AND <b.a.atom> == "B2") {
            print <a.atom>
         },
         if (<a.atom> == "A" OR <b.a.atom> == "B" OR <a.atom> == "A1" OR <b.a.atom> == "B2") {
            print <a.atom>
         },
         if (<a.atom> == "A" OR <b.a.atom> == "B" AND <a.atom> == "A1" OR <b.a.atom> == "B2") {
            print <a.atom>
         },
         print <a>,
         print <b>,
         //table[p]("Persist"),
         //table[s]("Schedule"),
         //table[t]("Transient"),
         print <a.atom>,
         print <a.obj>,
         print |a.vectorAlias|,
         print |a.vecObj|,
         <d> = <c> AND NOT <d>,
         if (<d>) {
            print "" & <d>
         }
      }
   }
}

*struct[StructAliasBasicTests1] {
   name = "Teste"
   request = "REQ"
   help = "HLP"
   fields {
      +|vectdoc| : Vector[Document[StructAliasBasicTests1]] {
         request = 1
         order = 1
      },
      +[doc] : Document[StructAliasBasicTests1] {
         request = 1
         order = 1
      },
      +[atom] : String where ("\r\d\o-\o\@") {
         name = "ATOM"
         order = 1
         request = "ATOM"
         key = false
         default = "A"
      },
      &[obj] : *StructAliasBasicTests2 {
         request = "REQ2"
      },
      +|vectorAlias| : Vector[String] {
         order = 3
         request = "REQ1"
         element = "teste"
      },
      +[varListAlias] : List("a","b","1") {
         request = "LLL"
         atomic = true
      },
      &|vecObj| : Vector[*StructAliasBasicTests2] {
         request = "REQ2"
      }
   }
}

*struct[StructAliasBasicTests2] {
   name = "Teste"
   request = "REQ"
   help = "HLP"
   fields {
      &[a] : *StructAliasBasicTests1 {
         request = "REQA"
      }
   }
}